% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/command.R
\name{commandR}
\alias{commandR}
\title{Execute a function from the command line in production, capturing warnings
and errors.}
\usage{
commandR(fun, args = NULL)
}
\arguments{
\item{fun}{A function that returns an object that can be converted to JSON
using \code{\link[jsonlite]{toJSON}()}}

\item{args}{Generally set to NULL (the default), in which case \code{batch()}
will call \code{\link{commandArgs}()} to retrieve and then process command
line parameters (see Details, below, for required command line arguments).
Alternatively, a character vector that mimics the results from
\code{\link{commandArgs}()} can be passed for interactive use or debugging.
Values must be in the form `--<parameter>=<argument>` (or `--<parameter>`
for boolean switch).}
}
\value{
A numeric vector with a single value: 0 if \code{fun} terminates
  successfully, 1 if \code{fun} terminates successfully with warnings,
  2 if \code{fun} throw an error, and 3 if an error occurs in reporting and
  no report was sent to `--report-to` (in this case a report will go to
  stderr). As a side effect, \code{batch()} creates a JSON object with the
  following format:

  \{
    "resultType": c("Success", "Warning", "Error)
    "warningAndErrorMessages": [(warningMsg1, warningMsg2, ..., warningMsgN) (, error)],
    "time": "2024-09-07 00:30:37.577178 UTC",
    "commandLineArgs": <args>,
    "result": <result from `fun` (as JSON)>
  \}

  Depending on the command line values contained in \code{args}, the JSON
  object will be written to location specified by `--report-to` command line
  parameter. See Details. If fun returns a value successfully, but an error
  prevents reporting to a file or webhook (e.g., the file can't be opened or
  the URL for the webhook is invalid), the error and results from `fun` will
  be reported to stderr. Therefore, even if reporting to a webhook or file is
  requested, piping stderr to a log file is recommended.
}
\description{
\code{commandR()} allows any function to be used in a production environment.
It is intended to be used like \code{\link{do.call}()}, except that results
of the function are either:
\itemize{
\item{converted to JSON and written to a file or sent to a webhook;}
\item{printed to stdout or stderr; or}
\item{saved as an .rdata file using \code{\link{saveRDS}()}}
}
}
\details{
The result of \code{fun} is incorporated into a list that contains a
timestamp, a result type, the command line arguments, the parsed
interpretation of the command line arguments, and a list of any warnings or
errors (complete with stack trace) (see Value, below).  The list can be
printed to stdout or stderr, saved as an .rdata file, posted to a webhook or
written to a file as JSON.

To operate \code{commandR()} from the command line, place a call to
\code{commandR()} into a R script.  Then, call the script from the command
line (e.g., using Rscript).

In addition to the parameters to be passed to `fun`, \link{batch()}
recognizes the following command line parameters:

\itemize{
\item{\code{--report-to=<location>} determines how results are reported.
Value values of \code{report-to} are one of:
\itemize{
\item{the value "stdout" for reporting to stdout (the defualt);}
\item{the value "stderr" for reporting to stderr, or;}
\item{a fully specified file name for a local file;}
\item{a fully specified file name in an S3: bucket (starting with "S3://");}
\item{the URL of a webhook (staring with "http://" or "https://");}
\item{the name of an environment variable containing any of the above.}
}
Note that the results will be gzipped if .gz is at the end of a local or S3
file name.}
\item{\code{--simulate-error=<type>}. Simulates errors for testing and
debugging. <type> is one of "args", "function", "report", or
"function/report". "args" will simulate an error in the processing of command
line arguments, "function" an error in the function passed to `fun`, "report"
an error in reporting results, and "function/report" an error in both the
`fun` and reporting. `fun` errors will be reported to location specified by
`report-to`.  If any other error type is requested, reporting will be to
stderr.}
\item{\code{--simulate-warning=<type>}. Simulates warnings for testing and
debugging.  For <type> definition, see `--simulate-error`}
\item{\code{--overwrite}}. By default, when `--report-to` is a file name, the
file is appended. If `--overwrite` flag is included, the file will be
overwritten (if it exists). `--overwrite` has no effect if `--report-to` is
not a local disk file. }

As an example, consider the \code{\link{log}} function in R.
\code{\link{log}} takes two arguments, \code{x} and \code{base}. An example
script called "logarithm.R" might be used to calculate and return the log of
values passed from the command line and report the result to a file, webhook,
or stdout.

A simple (but not recommended) call from the command line might look like
this:

\code{Rscript /path/to/logarithm.R --report-to=https://my.webhook.com
--x=12,14,30 --base = 10}

and logarithm.R would look like this:

\code{# -- file: logarithm.R -----------------------------} \cr

\code{# wrapper that returns the result of log as a named list} \cr
\code{batch_log <- function(x, base = exp(1), ...) \{} \cr
\code{\verb{   if(is.character(x)) x <- strsplit(x, ",")[[1]]}}
\code{\verb{   log(as.numeric(x), as.numeric(base))}} \cr
\code{\}} \cr

\code{batch(batch_log)}

\code{#--------------------------------------------------}

In this case, \code{batch()} will pass all parameters to
\code{\link{batch_log}()} and all parameters will be passed as character
strings.  There is also no mechanism to control to the data types of
arguments. "12,14,30" (the value of x) is passed to \code{\link{batch_log}()}
as a character. This means that the \code{\link{log}()} function can't be
called directly from within `logarithm.R`.  Instead,
\code{\link{batch_log}()} must be created to do some pre-processing before
\code{\link{log}()} can be called. Also, because `--report-to` and any other
parameters used by \code{batch()} will be passed to
\code{\link{batch_log}()}, `...` must be in the signature for
\code{\link{batch_log}()}, as shown above.

All of these issues can be avoided by passing command line arguments as two
two JSON objects (the recommended approach), using the parameter names
`--batch-args` and `--fun-args`:

\code{Rscript /path/to/logarithm.R --batch-args='{"report-to":"stdout"}'
--fun-args='{"x":[45,10,20],"base":10}'}

In this case, only the arguments in `--batch-args` are passed to `fun` and
the arguments have data types (numeric, logical, string, etc.) Therefore, the
script can be much simpler (and less error prone):

\code{# -- file: logarithm.R -----------------------------} \cr

\code{batch(log)}

\code{#--------------------------------------------------}

A note on parallel processing... \code{batch} has been tested extensively
with \code{mclapply} for parallel processing. The safest approach is to embed
\code{mclapply} in a script called from the command prompt using
\code{Rscript} (Google "Rscript command line" for more.) Parallel processing
using \code{mclapply} to call \code{batch} from within Rstudio often works,
but can cause Rstudio to freeze (perhaps only if screen saver engages??).  In
this case, batch processing usually proceeds successfully even after RStudio
is frozen, but RStudio must be terminated manually, potentially leading to
loss of code.
}
